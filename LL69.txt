LL CREATE DELETE AND INSERT
#include <stdio.h>
#include <stdlib.h>

// Define a node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to display the list
void display(struct Node* head) {
    struct Node* temp = head;
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to insert at end
struct Node* insertEnd(struct Node* head, int value) {
    struct Node* newNode = createNode(value);
    if (head == NULL)
        return newNode;

    struct Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;

    temp->next = newNode;
    return head;
}

// Function to delete a node by value
struct Node* deleteNode(struct Node* head, int value) {
    struct Node *temp = head, *prev = NULL;

    // If head node holds the value
    if (temp != NULL && temp->data == value) {
        head = temp->next;
        free(temp);
        return head;
    }

    // Search for the value
    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }

    // If not found
    if (temp == NULL)
        return head;

    prev->next = temp->next;
    free(temp);
    return head;
}

int main() {
    struct Node* head = NULL;
    int val;

    // Create list with 3 nodes
    for (int i = 0; i < 3; i++) {
        printf("Enter value to insert: ");
        scanf("%d", &val);
        head = insertEnd(head, val);
    }

    display(head);

    // Insert one more value
    printf("Enter value to insert at end: ");
    scanf("%d", &val);
    head = insertEnd(head, val);
    display(head);

    // Delete a value
    printf("Enter value to delete: ");
    scanf("%d", &val);
    head = deleteNode(head, val);
    display(head);

    return 0;
}
